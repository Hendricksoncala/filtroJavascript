export const getAllclientsNotRequestsAndNotPayments = async() =>{
    let res = await fetch(`http://localhost:5501/clients`)
    let paymentsRes = await fetch(`http://localhost:5505/payments`);
    let requestsRes = await fetch(`http://localhost:5508/requests`);
    let clients = await res.json()
    let payments = await paymentsRes.json();
    let requests = await requestsRes.json();

    let clientsWithoutPayments = clients.filter(client => {
        return !payments.some(payment => payment.code_client === client.client_code);
    });

    let clientsWithoutRequests = clientsWithoutPayments.filter(client => {
        return !requests.some(request => request.code_client === client.client_code);
    });

    return clientsWithoutRequests;
}

export const getProductsNeverOrdered = async() =>{
    let productsRes = await fetch(`http://localhost:5506/products`);
    let products = await productsRes.json();

    let ordersRes = await fetch(`http://localhost:5508/requests`);
    let orders = await ordersRes.json();

    let productsInOrders = new Set();
        orders.forEach(order => {
            if (order.products) {
                order.products.forEach(product => {
                    productsInOrders.add(product.code_product);
                });
            }
        });

    let productsNeverOrdered = products.filter(product => !productsInOrders.has(product.code_product));

    return productsNeverOrdered;
}

export const getEmployeesWithoutOfficeAndClients = async() =>{
    let employeesRes = await fetch(`http://localhost:5502/employee`);
    let clientsRes = await fetch(`http://localhost:5501/clients`);
    let officesRes = await fetch(`http://localhost:5504/offices`);

    let employees = await employeesRes.json();
    let clients = await clientsRes.json();
    let offices = await officesRes.json();

    let employeesWithoutOffice = employees.filter(employee => !employee.code_office);
    let employeesWithClients = clients.map(client => client.code_employee_sales_manager);
    let employeesWithoutClients = employees.filter(employee => !employeesWithClients.includes(employee.employee_code));

    return {
        employeesWithoutOffice: employeesWithoutOffice,
        employeesWithoutClients: employeesWithoutClients
    };
}